@use '../../../vars/colors' as *;
@use './_iconpack-toolbar' as *;
@use './_iconpack-snap' as *;
@use './_iconpack-LOM' as *;
@use './_iconpack-QS' as *;
@use './_iconpack-users' as *;
@use './_iconpack-fontawesome' as *;
@use './_iconpack-ribbons' as *;
@use './_btn-system' as *;

$mixin-def-color: $tertiary-color;

@function encodecolor($string) {
	@if type-of($string) == 'color' and str-index(#{$string}, '#') == 1 {
		$hex: str-slice(ie-hex-str($string), 4);
		$string: unquote('#{$hex}');

		@return '%23' + $string;
	}

	@return $string;
}

@mixin getcode($name, $new-color) {
	//background-color:red;
	$icon-color: encodecolor($new-color);
	@include getIconsToolbar($name, $icon-color);
	@include getIconsSnap($name, $icon-color);
	@include getIconsLOM($name, $icon-color);
	@include getIconsQS($name, $icon-color);
	@include getIconsUsers($name, $icon-color);
	@include getIconsRibbons($name, $icon-color);
	@include getIconsFontawesome($name, $icon-color);
	// @include getIconsNew($name, $icon-color);
}

/* *************************************************************
 * adjust size
 * ************************************************************/
@mixin iconsize($size, $padding) {
	width: $size;
	height: $size;
	margin: $padding;
}

/* *************************************************************************
 * -------------------------------- generate icon extends-------------------
 * usage @include iconpack
 * ************************************************************************/
@mixin iconpack($class, $size, $color: #404040) {
	@if ($size == md) {
		$size: $small-btn;
	} @else {
		$size: $large-btn;
	}

	@include getcode($class, $color);
	background-repeat: no-repeat;
	width: $size;
	height: $size;
}
